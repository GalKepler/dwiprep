    # Step 8: Generate target images for T1->DWI registration
    app.console('Generating contrast-matched images for '
                'inter-modal registration between DWIs and T1')
    run.command('dwiextract ' + dwi_image + ' -bzero - | '
                'mrcalc - 0.0 -max - | '
                'mrmath - mean -axis 3 dwi_meanbzero.mif')
    run.command('mrcalc 1 dwi_meanbzero.mif -div '
                + dwi_mask_image
                + ' -mult -'
                + ' | '
                + 'mrhistmatch nonlinear - '
                + T1_image
                + ' dwi_pseudoT1.mif'
                + ' -mask_input '
                + dwi_mask_image
                + ' -mask_target T1_mask.mif')
    run.command('mrcalc 1 '
                + T1_image
                + ' -div'
                + ('' if T1_is_premasked else (' T1_mask.mif -mult'))
                + ' - | '
                + 'mrhistmatch nonlinear'
                + ' - dwi_meanbzero.mif T1_pseudobzero.mif'
                + ' -mask_input T1_mask.mif'
                + ' -mask_target ' + dwi_mask_image)

    # Step 9: Perform DWI->T1 registration
    #   Note that two registrations are performed:
    #   Even though we have a symmetric registration, generation of the
    #   two histogram-matched images means that you will get slightly
    #   different answers depending on which synthesized image &
    #   original image you use
    app.console('Performing registration between DWIs and T1')
    transform_pT1_T1 = 'rigid_pseudoT1_to_T1.txt'
    transform_b0_pb0 = 'rigid_bzero_to_pseudobzero.txt'
    run.command('mrregister dwi_pseudoT1.mif '
                + T1_image
                + ' -type rigid'
                + ' -mask1 ' + dwi_mask_image
                + ' -mask2 T1_mask.mif'
                + ' -rigid ' + transform_pT1_T1)
    run.command('mrregister dwi_meanbzero.mif T1_pseudobzero.mif'
                + ' -type rigid '
                + ' -mask1 ' + dwi_mask_image
                + ' -mask2 T1_mask.mif'
                + ' -rigid ' + transform_b0_pb0)
    app.cleanup('dwi_meanbzero.mif')

    # Step 10: Perform DWI->T1 transformation
    # In this scenario, we're going to transform the DWI data to the T1
    #   rather than the other way around, since the T1 is more likely to
    #   be used as a common reference across multiple analysis pipelines,
    #   and we're transforming DWIs rather than FODs
    transform_average = 'rigid_dwi_to_T1.txt'
    run.command('transformcalc '
                + transform_pT1_T1
                + ' '
                + transform_b0_pb0
                + ' average '
                + transform_average)
    app.cleanup(transform_pT1_T1)
    app.cleanup(transform_b0_pb0)
    transformed_dwi_image = os.path.splitext(dwi_image)[0] \
                            + '_transform.mif'
    transformed_dwi_mask_image = os.path.splitext(dwi_mask_image)[0] \
                                 + '_transform.mif'
    run.command('mrtransform '
                + dwi_image
                + ' '
                + transformed_dwi_image
                + ' -linear '
                + transform_average)
    app.cleanup(dwi_image)
    dwi_image = transformed_dwi_image
    run.command('mrtransform '
                + dwi_mask_image
                + ' '
                + transformed_dwi_mask_image
                + ' -linear '
                + transform_average)
    app.cleanup(dwi_mask_image)
    app.cleanup(transform_average)
    dwi_mask_image = transformed_dwi_mask_image